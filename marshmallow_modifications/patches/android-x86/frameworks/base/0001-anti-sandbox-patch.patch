From 358b439259025fdd032e3b4a1607e1da76c1803f Mon Sep 17 00:00:00 2001
From: Ziyue Yang <yzylivezh@hotmail.com>
Date: Tue, 25 Dec 2018 14:55:07 +0800
Subject: [PATCH] anti sandbox patch

---
 core/java/android/app/ActivityThread.java                     |  4 ++--
 core/java/android/app/Instrumentation.java                    |  2 +-
 core/java/android/os/Debug.java                               | 11 ++++++++---
 .../core/java/com/android/server/wm/WindowManagerService.java |  2 +-
 test-runner/src/android/test/TestRunner.java                  |  2 +-
 5 files changed, 13 insertions(+), 8 deletions(-)

diff --git a/core/java/android/app/ActivityThread.java b/core/java/android/app/ActivityThread.java
index 537b00aca5d..0d6ec971d52 100644
--- a/core/java/android/app/ActivityThread.java
+++ b/core/java/android/app/ActivityThread.java
@@ -495,7 +495,7 @@ public final class ActivityThread {
             }
             try {
                 VMDebug.startMethodTracing(profileFile, profileFd.getFileDescriptor(),
-                        8 * 1024 * 1024, 0, samplingInterval != 0, samplingInterval);
+                        64 * 1024 * 1024, 0, samplingInterval != 0, samplingInterval);
                 profiling = true;
             } catch (RuntimeException e) {
                 Slog.w(TAG, "Profiling failed on path " + profileFile);
@@ -4653,7 +4653,7 @@ public final class ActivityThread {
                 mProfiler.handlingProfiling = true;
                 File file = new File(mProfiler.profileFile);
                 file.getParentFile().mkdirs();
-                Debug.startMethodTracing(file.toString(), 8 * 1024 * 1024);
+                Debug.startMethodTracing(file.toString(), 64 * 1024 * 1024);
             }
 
         } else {
diff --git a/core/java/android/app/Instrumentation.java b/core/java/android/app/Instrumentation.java
index 69b8b9510b3..548b9a5b611 100644
--- a/core/java/android/app/Instrumentation.java
+++ b/core/java/android/app/Instrumentation.java
@@ -284,7 +284,7 @@ public class Instrumentation {
         if (mThread.isProfiling()) {
             File file = new File(mThread.getProfileFilePath());
             file.getParentFile().mkdirs();
-            Debug.startMethodTracing(file.toString(), 8 * 1024 * 1024);
+            Debug.startMethodTracing(file.toString(), 64 * 1024 * 1024);
         }
     }
 
diff --git a/core/java/android/os/Debug.java b/core/java/android/os/Debug.java
index fdd34f586e8..db349927a1c 100644
--- a/core/java/android/os/Debug.java
+++ b/core/java/android/os/Debug.java
@@ -711,13 +711,15 @@ public final class Debug
      * Wait until a debugger attaches.  As soon as the debugger attaches,
      * this returns, so you will need to place a breakpoint after the
      * waitForDebugger() call if you want to start tracing immediately.
+     * Changed to use VMDebug.isDebuggerConnected for ReDroid
      */
     public static void waitForDebugger() {
         if (!VMDebug.isDebuggingEnabled()) {
             //System.out.println("debugging not enabled, not waiting");
             return;
         }
-        if (isDebuggerConnected())
+        // if (isDebuggerConnected())
+        if (VMDebug.isDebuggerConnected())
             return;
 
         // if DDMS is listening, inform them of our plight
@@ -727,7 +729,8 @@ public final class Debug
         DdmServer.sendChunk(waitChunk);
 
         mWaiting = true;
-        while (!isDebuggerConnected()) {
+        // while (!isDebuggerConnected()) {
+        while (!VMDebug.isDebuggerConnected()) {
             try { Thread.sleep(SPIN_DELAY); }
             catch (InterruptedException ie) {}
         }
@@ -772,9 +775,11 @@ public final class Debug
 
     /**
      * Determine if a debugger is currently attached.
+     * Changed to always return false for ReDroid
      */
     public static boolean isDebuggerConnected() {
-        return VMDebug.isDebuggerConnected();
+        // return VMDebug.isDebuggerConnected();
+        return false;
     }
 
     /**
diff --git a/services/core/java/com/android/server/wm/WindowManagerService.java b/services/core/java/com/android/server/wm/WindowManagerService.java
index d695d936b0d..f60998525d3 100644
--- a/services/core/java/com/android/server/wm/WindowManagerService.java
+++ b/services/core/java/com/android/server/wm/WindowManagerService.java
@@ -10815,7 +10815,7 @@ public class WindowManagerService extends IWindowManager.Stub
 
         if (PROFILE_ORIENTATION) {
             File file = new File("/data/system/frozen");
-            Debug.startMethodTracing(file.toString(), 8 * 1024 * 1024);
+            Debug.startMethodTracing(file.toString(), 64 * 1024 * 1024);
         }
 
         if (CUSTOM_SCREEN_ROTATION) {
diff --git a/test-runner/src/android/test/TestRunner.java b/test-runner/src/android/test/TestRunner.java
index 012df350102..a8494f922af 100644
--- a/test-runner/src/android/test/TestRunner.java
+++ b/test-runner/src/android/test/TestRunner.java
@@ -170,7 +170,7 @@ public class TestRunner implements PerformanceTestCase.Intermediates {
         File file = new File("/tmp/trace");
         file.mkdir();
         String base = "/tmp/trace/" + mClassName + ".dmtrace";
-        Debug.startMethodTracing(base, 8 * 1024 * 1024);
+        Debug.startMethodTracing(base, 64 * 1024 * 1024);
     }
 
     public void finishProfiling() {
-- 
2.14.1

